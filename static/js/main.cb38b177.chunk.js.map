{"version":3,"sources":["Rtc.js","App.js","serviceWorker.js","index.js"],"names":["gotMedia","stream","peer1","Peer","initiator","peer2","on","data","console","log","signal","videoNode","document","querySelector","srcObject","src","window","URL","createObjectURL","play","Rtc","state","errMsg","navigator","mediaDevices","getUserMedia","video","audio","then","catch","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gSAIA,SAASA,EAASC,GAChB,IAAIC,EAAQ,IAAIC,IAAK,CAAEC,WAAW,EAAMH,OAAQA,IAC5CI,EAAQ,IAAIF,IAEhBD,EAAMI,GAAG,UAAU,SAACC,GAClBC,QAAQC,IAAI,OAAQF,GACpBF,EAAMK,OAAOH,MAGfF,EAAMC,GAAG,UAAU,SAACC,GAClBL,EAAMQ,OAAOH,MAGfF,EAAMC,GAAG,UAAU,SAACL,GAClB,IAAIU,EAAYC,SAASC,cAAc,SACnC,cAAeF,EACjBA,EAAUG,UAAYb,EAEtBU,EAAUI,IAAMC,OAAOC,IAAIC,gBAAgBjB,GAE7CU,EAAUQ,U,IAwBCC,E,4MAnBbC,MAAQ,CACNC,OAAQ,M,kEAIRC,UAAUC,aACPC,aAAa,CACZC,OAAO,EACPC,OAAO,IAERC,KAAK5B,GACL6B,OAAM,iB,+BAIT,OAAO,oC,GAhBOC,IAAMC,WCzBTC,EADH,kBAAM,kBAAC,EAAD,OCUEC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDyHpB,kBAAmBjB,WACrBA,UAAUkB,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdf,OAAM,SAAAgB,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.cb38b177.chunk.js","sourcesContent":["import React from \"react\";\nimport Peer from \"simple-peer\";\n// import \"./styles.css\";\n\nfunction gotMedia(stream) {\n  var peer1 = new Peer({ initiator: true, stream: stream });\n  var peer2 = new Peer();\n\n  peer1.on(\"signal\", (data) => {\n    console.log(\"data\", data);\n    peer2.signal(data);\n  });\n\n  peer2.on(\"signal\", (data) => {\n    peer1.signal(data);\n  });\n\n  peer2.on(\"stream\", (stream) => {\n    var videoNode = document.querySelector(\"video\");\n    if (\"srcObject\" in videoNode) {\n      videoNode.srcObject = stream;\n    } else {\n      videoNode.src = window.URL.createObjectURL(stream);\n    }\n    videoNode.play();\n  });\n}\n\nclass Rtc extends React.Component {\n  state = {\n    errMsg: null,\n  };\n\n  componentDidMount() {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: false,\n      })\n      .then(gotMedia)\n      .catch(() => {});\n  }\n\n  render() {\n    return <video />;\n  }\n}\n\nexport default Rtc;\n","import React from \"react\";\nimport Rtc from \"./Rtc.js\";\nconst App = () => <Rtc />;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}