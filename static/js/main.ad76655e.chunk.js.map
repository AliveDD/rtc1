{"version":3,"sources":["../node_modules/peerjs/dist sync","p2p.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","initialState","names","myVideo","document","querySelector","theyVideo","reducer","state","action","type","payload","peerId","name","App","useReducer","dispatch","peer","useRef","Peer","connections","useState","myPeerId","setMyPeerId","connectTo","setConnectTo","peers","setPeers","connectedPeers","useCallback","current","map","concat","addToSwarm","conn","push","removeFromSwarm","splice","findIndex","connect","handler","includes","console","log","outgoingConnection","metadata","on","onOpen","off","onClose","err","error","message","handleOutgoingConnection","data","filter","handleIncomingConnection","close","newConnectionPeers","myUniquePeers","length","send","onIncoming","incomingConnection","connPeerId","navigator","mediaDevices","getUserMedia","video","audio","then","stream","call","remoteStream","srcObject","src","window","URL","createObjectURL","style","display","play","catch","init","answer","cleanup","useEffect","handleConnectSubmit","ev","preventDefault","canSubmit","find","onSubmit","autoCapitalize","autoComplete","autoCorrect","spellCheck","autoFocus","onChange","target","value","placeholder","disabled","key","item","i","Fragment","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"yIAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,uICGnBC,G,MAAe,CACnBC,MAAO,KAGHC,EAAUC,SAASC,cAAc,YACjCC,EAAYF,SAASC,cAAc,cAEzC,SAASE,EAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,cACH,OAAO,eACFF,EADL,CAEEN,MAAM,eAAMM,EAAMN,MAAb,eAAqBO,EAAOE,QAAQC,OAASH,EAAOE,QAAQE,SAErE,QACE,OAAOL,GAIE,SAASM,IAAO,IAAD,EACFC,qBAAWR,EAASN,GADlB,mBACde,GADc,WAGtBC,EAAOC,iBAAO,IAAIC,KAClBC,EAAcF,iBAAO,IAJC,EAMIG,mBAAS,MANb,mBAMrBC,EANqB,KAMXC,EANW,OAOMF,mBAAS,IAPf,mBAOrBG,EAPqB,KAOVC,EAPU,OAQFJ,mBAAS,IARP,mBAQrBK,EARqB,KAQdC,EARc,KAUtBC,EAAiBC,uBACrB,kBAAMT,EAAYU,QAAQC,KAAI,qBAAGd,QAAiBe,OAAOV,KACzD,CAACA,IAQGW,EAAaJ,uBAAY,SAACK,GAC9Bd,EAAYU,QAAQK,KAAKD,GACzBP,EAASP,EAAYU,QAAQC,KAAI,qBAAGd,WACnC,IACGmB,EAAkBP,uBAAY,SAACK,GACnCd,EAAYU,QAAQO,OAClBjB,EAAYU,QAAQQ,WAAU,qBAAGrB,OAAoBiB,EAAKjB,QAC1D,GAEFU,EAASP,EAAYU,QAAQC,KAAI,qBAAGd,WACnC,IAEGsB,EAAUV,uBACd,SAACjB,EAAQ4B,GACP,GAAIZ,IAAiBa,SAAS7B,GAC5B8B,QAAQC,IAAR,+BAAoC/B,EAApC,oBADF,CAKA,IAAMgC,EAAqB3B,EAAKa,QAAQS,QAAQ3B,EAAQ,CACtDiC,SAAU,CAAEnB,MAAOE,OAYrBgB,EAAmBE,GAAG,QATP,SAATC,IACJP,EAAQI,GACRA,EAAmBI,IAAI,OAAQD,MAQjCH,EAAmBE,GAAG,SANN,SAAVG,IACJb,EAAgBQ,GAChBA,EAAmBI,IAAI,QAASC,MAKlCL,EAAmBE,GAAG,SAAS,SAACI,GAAD,OAC7BR,QAAQS,MAAM,MAAOD,EAAIE,eAG7B,CAACxB,EAAgBQ,IAGbiB,EAA2BxB,uBAC/B,SAACK,GACCD,EAAWC,GAEXA,EAAKY,GAAG,QAAQ,SAACQ,GAEG,mBAAdA,EAAK5C,KACP4C,EAAK3C,QAAQe,MACV6B,QAAO,SAAC3C,GAAD,OAAagB,IAAiBa,SAAS7B,MAC9CmB,KAAI,SAACnB,GAAD,OAAY2B,EAAQ3B,EAAQyC,MAEnCrC,EAASsC,QAIf,CAAC1B,EAAgBK,EAAYM,IAGzBiB,EAA2B3B,uBAC/B,SAACK,GACC,GAAIN,IAAiBa,SAASP,EAAKjB,MAEjC,OADAyB,QAAQC,IAAR,+BAAoCT,EAAKjB,KAAzC,0BACOiB,EAAKuB,QAGdxB,EAAWC,GAEXA,EAAKY,GAAG,QAAQ,SAACQ,GACfZ,QAAQC,IAAI,uBAAwBW,GAClB,mBAAdA,EAAK5C,MACPM,EAASsC,MAIb,IAAMI,GAAsBxB,EAAKW,UAAY,IAAInB,OAAS,GAC1DgC,EACGH,QAAO,SAAC3C,GAAD,OAAagB,IAAiBa,SAAS7B,MAC9CmB,KAAI,SAACnB,GAAD,OAAY2B,EAAQ3B,EAAQyC,MAEnC,IAAMM,EAAgB/B,IAAiB2B,QACrC,SAAC3C,GAAD,OAAa8C,EAAmBjB,SAAS7B,IAAWA,IAAWU,KAE7DqC,EAAcC,OAAS,GACzB1B,EAAK2B,KAAK,CACRnD,KAAM,iBACNC,QAAS,CAAEe,MAAOiC,OAIxB,CAAC/B,EAAgBK,EAAYM,EAASc,EAA0B/B,IAG5DwC,EAAajC,uBACjB,SAACkC,GA+BCA,EAAmBjB,GAAG,QA9BP,SAATC,IACJS,EAAyBO,GAGzB,IAAMC,EAAa5C,EAAYU,QAAQ,GAAGb,KAC1CgD,UAAUC,aACPC,aAAa,CACZC,OAAO,EACPC,OAAO,IAERC,MAAK,SAACC,GACQtD,EAAKa,QAAQ0C,KAAKR,EAAYO,GACtCzB,GAAG,UAAU,SAAC2B,GACb,cAAetE,EACjBA,EAAQuE,UAAYD,EAEpBtE,EAAQwE,IAAMC,OAAOC,IAAIC,gBAAgBL,GAE3CtE,EAAQ4E,MAAMC,QAAU,QACxB7E,EAAQ8E,aAGXC,OAAM,eAETnB,EAAmBf,IAAI,OAAQD,MAOjCgB,EAAmBjB,GAAG,SALN,SAAVG,IACJb,EAAgB2B,GAChBA,EAAmBf,IAAI,QAASC,MAIlCc,EAAmBjB,GAAG,SAAS,SAACI,GAAD,OAASR,QAAQS,MAAMD,EAAIE,cAE5D,CAACI,EAA0BpB,IAGvB+C,EAAOtD,uBAAY,WACvBZ,EAAKa,QAAQgB,GAAG,QAAQ,SAAC9C,GACvBuB,EAAYvB,MAGdiB,EAAKa,QAAQgB,GAAG,QAAQ,SAAC0B,GAGvBP,UAAUC,aACPC,aAAa,CACZC,OAAO,EACPC,OAAO,IAERC,MAAK,SAACC,GACL7B,QAAQC,IAAI,SAAU4B,GACtBC,EAAKY,OAAOb,GAEZC,EAAK1B,GAAG,UAAU,SAACyB,GACb,cAAejE,EACjBA,EAAUoE,UAAYH,EAEtBjE,EAAUqE,IAAMC,OAAOC,IAAIC,gBAAgBP,GAE7CjE,EAAUyE,MAAMC,QAAU,QAC1B1E,EAAU2E,aAGbC,OAAM,kBAGXjE,EAAKa,QAAQgB,GAAG,aAAcgB,KAC7B,CAACA,IAEEuB,EAAUxD,uBAAY,WAC1BZ,EAAKa,QAAQkB,IAAI,OAAQzB,GACzBN,EAAKa,QAAQkB,IAAI,aAAcc,KAC9B,CAACA,IAEJwB,qBAAU,WAER,OADAH,IACOE,IACN,CAACF,EAAME,IAEV,IAAME,EAAsB1D,uBAC1B,SAAC2D,GACCA,EAAGC,iBACHhE,EAAa,IACbc,EAAQf,EAAW6B,KAErB,CAAC7B,EAAWe,EAASc,IAGjBqC,IACFlE,GACFA,IAAcF,IACbI,EAAMiE,MAAK,SAAC/E,GAAD,OAAYA,IAAWY,KAErC,OAAKF,EAGH,8BACE,0BAAMsE,SAAUL,GACd,2BACEM,eAAe,MACfC,aAAa,MACbC,YAAY,MACZC,WAAW,QACXC,WAAS,EACTC,SAAU,SAACzG,GAAD,OAAOgC,EAAahC,EAAE0G,OAAOC,QACvCA,MAAO5E,EACPxB,GAAG,YACHqG,YAAY,wBAEd,4BAAQ3F,KAAK,SAAS4F,UAAWZ,GAC9BlE,IAAcF,EACX,kBACAI,EAAMiE,MAAK,SAAC/E,GAAD,OAAYA,IAAWY,KAClC,iCACA,YAIR,iDACA,4BACE,wBAAI+E,IAAKjF,GAAWA,EAApB,UACCI,EAAMK,KAAI,SAACyE,EAAMC,GAAP,OACT,wBAAIF,IAAKC,GAAOA,QA7BF,KC1OT,SAAS1F,IAItB,OACE,kBAAC,IAAM4F,SAAP,KACE,kBAAC,EAAD,OCCcC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7G,SAAS8G,eAAe,SDyHpB,kBAAmBjD,WACrBA,UAAUkD,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdpC,OAAM,SAAA/B,GACLT,QAAQS,MAAMA,EAAMC,c","file":"static/js/main.ad76655e.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 13;","import React, {\n  useRef,\n  useReducer,\n  useState,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport Peer from \"peerjs\";\n\nimport \"./styles.css\";\n\nconst initialState = {\n  names: {},\n};\n\nconst myVideo = document.querySelector(\".myVideo\");\nconst theyVideo = document.querySelector(\".theyVideo\");\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"name update\":\n      return {\n        ...state,\n        names: { ...state.names, [action.payload.peerId]: action.payload.name },\n      };\n    default:\n      return state;\n  }\n}\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const peer = useRef(new Peer());\n  const connections = useRef([]);\n\n  const [myPeerId, setMyPeerId] = useState(null);\n  const [connectTo, setConnectTo] = useState(\"\");\n  const [peers, setPeers] = useState([]);\n\n  const connectedPeers = useCallback(\n    () => connections.current.map(({ peer }) => peer).concat(myPeerId),\n    [myPeerId]\n  );\n\n  // const broadcast = useCallback((msg) => {\n  //   console.log(\"broadcast\", msg);\n  //   connections.current.map((conn) => conn.send(msg));\n  // }, []);\n\n  const addToSwarm = useCallback((conn) => {\n    connections.current.push(conn);\n    setPeers(connections.current.map(({ peer }) => peer));\n  }, []);\n  const removeFromSwarm = useCallback((conn) => {\n    connections.current.splice(\n      connections.current.findIndex(({ peer }) => peer === conn.peer),\n      1\n    );\n    setPeers(connections.current.map(({ peer }) => peer));\n  }, []);\n\n  const connect = useCallback(\n    (peerId, handler) => {\n      if (connectedPeers().includes(peerId)) {\n        console.log(`Already connected to ${peerId}. Aborting.`);\n        return;\n      }\n\n      const outgoingConnection = peer.current.connect(peerId, {\n        metadata: { peers: connectedPeers() },\n      });\n\n      const onOpen = () => {\n        handler(outgoingConnection);\n        outgoingConnection.off(\"open\", onOpen);\n      };\n      const onClose = () => {\n        removeFromSwarm(outgoingConnection);\n        outgoingConnection.off(\"close\", onClose);\n      };\n\n      outgoingConnection.on(\"open\", onOpen);\n      outgoingConnection.on(\"close\", onClose);\n      outgoingConnection.on(\"error\", (err) =>\n        console.error(\"err\", err.message)\n      );\n    },\n    [connectedPeers, removeFromSwarm]\n  );\n\n  const handleOutgoingConnection = useCallback(\n    (conn) => {\n      addToSwarm(conn);\n\n      conn.on(\"data\", (data) => {\n        // console.log(\"handle Outgoing Conn\", conn);\n        if (data.type === \"peer discovery\") {\n          data.payload.peers\n            .filter((peerId) => !connectedPeers().includes(peerId))\n            .map((peerId) => connect(peerId, handleOutgoingConnection));\n        } else {\n          dispatch(data);\n        }\n      });\n    },\n    [connectedPeers, addToSwarm, connect]\n  );\n\n  const handleIncomingConnection = useCallback(\n    (conn) => {\n      if (connectedPeers().includes(conn.peer)) {\n        console.log(`Already connected to ${conn.peer}. Closing connection.`);\n        return conn.close();\n      }\n\n      addToSwarm(conn);\n\n      conn.on(\"data\", (data) => {\n        console.log(\"handle Incoming Conn\", data);\n        if (data.type !== \"peer discovery\") {\n          dispatch(data);\n        }\n      });\n\n      const newConnectionPeers = (conn.metadata || {}).peers || [];\n      newConnectionPeers\n        .filter((peerId) => !connectedPeers().includes(peerId))\n        .map((peerId) => connect(peerId, handleOutgoingConnection));\n\n      const myUniquePeers = connectedPeers().filter(\n        (peerId) => !newConnectionPeers.includes(peerId) && peerId !== myPeerId\n      );\n      if (myUniquePeers.length > 0) {\n        conn.send({\n          type: \"peer discovery\",\n          payload: { peers: myUniquePeers },\n        });\n      }\n    },\n    [connectedPeers, addToSwarm, connect, handleOutgoingConnection, myPeerId]\n  );\n\n  const onIncoming = useCallback(\n    (incomingConnection) => {\n      const onOpen = () => {\n        handleIncomingConnection(incomingConnection);\n\n        // get video from connection\n        const connPeerId = connections.current[0].peer;\n        navigator.mediaDevices\n          .getUserMedia({\n            video: true,\n            audio: false,\n          })\n          .then((stream) => {\n            const call = peer.current.call(connPeerId, stream);\n            call.on(\"stream\", (remoteStream) => {\n              if (\"srcObject\" in myVideo) {\n                myVideo.srcObject = remoteStream;\n              } else {\n                myVideo.src = window.URL.createObjectURL(remoteStream);\n              }\n              myVideo.style.display = \"block\";\n              myVideo.play();\n            });\n          })\n          .catch(() => {});\n\n        incomingConnection.off(\"open\", onOpen);\n      };\n      const onClose = () => {\n        removeFromSwarm(incomingConnection);\n        incomingConnection.off(\"close\", onClose);\n      };\n      incomingConnection.on(\"open\", onOpen);\n      incomingConnection.on(\"close\", onClose);\n      incomingConnection.on(\"error\", (err) => console.error(err.message));\n    },\n    [handleIncomingConnection, removeFromSwarm]\n  );\n\n  const init = useCallback(() => {\n    peer.current.on(\"open\", (id) => {\n      setMyPeerId(id);\n    });\n\n    peer.current.on(\"call\", (call) => {\n      // console.log(\"2 handleIncomingConnection conn\", conn);\n\n      navigator.mediaDevices\n        .getUserMedia({\n          video: true,\n          audio: false,\n        })\n        .then((stream) => {\n          console.log(\"stream\", stream);\n          call.answer(stream);\n\n          call.on(\"stream\", (stream) => {\n            if (\"srcObject\" in theyVideo) {\n              theyVideo.srcObject = stream;\n            } else {\n              theyVideo.src = window.URL.createObjectURL(stream);\n            }\n            theyVideo.style.display = \"block\";\n            theyVideo.play();\n          });\n        })\n        .catch(() => {});\n    });\n\n    peer.current.on(\"connection\", onIncoming);\n  }, [onIncoming]);\n\n  const cleanup = useCallback(() => {\n    peer.current.off(\"open\", setMyPeerId);\n    peer.current.off(\"connection\", onIncoming);\n  }, [onIncoming]);\n\n  useEffect(() => {\n    init();\n    return cleanup;\n  }, [init, cleanup]);\n\n  const handleConnectSubmit = useCallback(\n    (ev) => {\n      ev.preventDefault();\n      setConnectTo(\"\");\n      connect(connectTo, handleOutgoingConnection);\n    },\n    [connectTo, connect, handleOutgoingConnection]\n  );\n\n  const canSubmit =\n    !!connectTo &&\n    connectTo !== myPeerId &&\n    !peers.find((peerId) => peerId === connectTo);\n\n  if (!myPeerId) return null;\n\n  return (\n    <main>\n      <form onSubmit={handleConnectSubmit}>\n        <input\n          autoCapitalize=\"off\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck=\"false\"\n          autoFocus\n          onChange={(e) => setConnectTo(e.target.value)}\n          value={connectTo}\n          id=\"connectTo\"\n          placeholder=\"Enter known peer id\"\n        />\n        <button type=\"submit\" disabled={!canSubmit}>\n          {connectTo === myPeerId\n            ? \"That is your ID\"\n            : peers.find((peerId) => peerId === connectTo)\n            ? \"Already connected to that peer\"\n            : \"Connect\"}\n        </button>\n      </form>\n\n      <h2>Your connections:</h2>\n      <ul>\n        <li key={myPeerId}>{myPeerId} (you)</li>\n        {peers.map((item, i) => (\n          <li key={item}>{item}</li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n","import React, { useState } from \"react\";\n\n// import Rtc from \"./Rtc.js\";\nimport P2P from \"./p2p.js\";\n\nexport default function App() {\n  // const [isVid, setIsVid] = useState(false);\n  // console.log(\"isVid\", isVid);\n  // const toggleFull = () => setIsVid(!isVid);\n  return (\n    <React.Fragment>\n      <P2P />\n\n      {/* <Rtc /> */}\n      {/* <button onClick={() => toggleFull()} className=\"toggle\">\n        toggle full\n      </button> */}\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}