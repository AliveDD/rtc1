{"version":3,"sources":["../node_modules/peerjs/dist sync","Rtc.js","p2p.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","gotMedia","stream","peer1","Peer","initiator","peer2","on","data","signal","videoNode","document","querySelector","srcObject","src","window","URL","createObjectURL","play","React","Component","initialState","names","myVideo","reducer","state","action","type","payload","peerId","name","App","useReducer","dispatch","peer","useRef","connections","useState","myPeerId","setMyPeerId","connectTo","setConnectTo","peers","setPeers","connectedPeers","useCallback","current","map","concat","addToSwarm","conn","push","removeFromSwarm","splice","findIndex","connect","handler","includes","console","log","outgoingConnection","metadata","onOpen","off","onClose","err","error","message","broadcast","msg","send","handleOutgoingConnection","filter","handleIncomingConnection","close","newConnectionPeers","navigator","mediaDevices","getUserMedia","video","audio","then","catch","myUniquePeers","length","onIncoming","incomingConnection","init","cleanup","useEffect","handleConnectSubmit","preventDefault","canSubmit","find","onSubmit","autoCapitalize","autoComplete","autoCorrect","spellCheck","onChange","target","value","placeholder","disabled","key","item","i","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75eeb774.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 68;","import React from \"react\";\nimport Peer from \"simple-peer\";\n\nfunction gotMedia(stream) {\n  var peer1 = new Peer({ initiator: true, stream: stream });\n  var peer2 = new Peer();\n\n  peer1.on(\"signal\", (data) => {\n    peer2.signal(data);\n  });\n\n  peer2.on(\"signal\", (data) => {\n    peer1.signal(data);\n  });\n\n  peer2.on(\"stream\", (stream) => {\n    var videoNode = document.querySelector(\"video\");\n    if (\"srcObject\" in videoNode) {\n      videoNode.srcObject = stream;\n    } else {\n      videoNode.src = window.URL.createObjectURL(stream);\n    }\n    videoNode.play();\n  });\n}\n\nclass Rtc extends React.Component {\n  state = {\n    errMsg: null,\n  };\n\n  componentDidMount() {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: false,\n      })\n      .then(gotMedia)\n      .catch(() => {});\n  }\n\n  render() {\n    return <video />;\n  }\n}\n\nexport default Rtc;\n","import React, {\n  useRef,\n  useReducer,\n  useState,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport Peer from \"peerjs\";\n\nimport \"./styles.css\";\n\nconst initialState = {\n  names: {},\n};\n\nconst myVideo = document.querySelector(\".myVideo\");\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"name update\":\n      return {\n        ...state,\n        names: { ...state.names, [action.payload.peerId]: action.payload.name },\n      };\n    default:\n      return state;\n  }\n}\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const peer = useRef(new Peer());\n  const connections = useRef([]);\n\n  const [myPeerId, setMyPeerId] = useState(null);\n  const [connectTo, setConnectTo] = useState(\"\");\n  const [peers, setPeers] = useState([]);\n\n  const connectedPeers = useCallback(\n    () => connections.current.map(({ peer }) => peer).concat(myPeerId),\n    [myPeerId]\n  );\n\n  const addToSwarm = useCallback((conn) => {\n    connections.current.push(conn);\n    setPeers(connections.current.map(({ peer }) => peer));\n  }, []);\n\n  const removeFromSwarm = useCallback((conn) => {\n    connections.current.splice(\n      connections.current.findIndex(({ peer }) => peer === conn.peer),\n      1\n    );\n    setPeers(connections.current.map(({ peer }) => peer));\n  }, []);\n\n  const connect = useCallback(\n    (peerId, handler) => {\n      if (connectedPeers().includes(peerId)) {\n        console.log(`Already connected to ${peerId}. Aborting.`);\n        return;\n      }\n\n      const outgoingConnection = peer.current.connect(peerId, {\n        metadata: { peers: connectedPeers() },\n      });\n\n      const onOpen = () => {\n        handler(outgoingConnection);\n        outgoingConnection.off(\"open\", onOpen);\n      };\n      const onClose = () => {\n        removeFromSwarm(outgoingConnection);\n        outgoingConnection.off(\"close\", onClose);\n      };\n\n      outgoingConnection.on(\"open\", onOpen);\n      outgoingConnection.on(\"close\", onClose);\n      outgoingConnection.on(\"error\", (err) => console.error(err.message));\n    },\n    [connectedPeers, removeFromSwarm]\n  );\n\n  const broadcast = useCallback((msg) => {\n    connections.current.map((conn) => conn.send(msg));\n  }, []);\n\n  const handleOutgoingConnection = useCallback(\n    (conn) => {\n      addToSwarm(conn);\n\n      conn.on(\"data\", (data) => {\n        if (data) {\n          if (\"srcObject\" in myVideo) {\n            myVideo.srcObject = data;\n          } else {\n            myVideo.src = window.URL.createObjectURL(data);\n          }\n          myVideo.play();\n        }\n\n        if (data.type === \"peer discovery\") {\n          data.payload.peers\n            .filter((peerId) => !connectedPeers().includes(peerId))\n            .map((peerId) => connect(peerId, handleOutgoingConnection));\n        } else {\n          dispatch(data);\n        }\n      });\n    },\n    [connectedPeers, addToSwarm, connect]\n  );\n\n  const handleIncomingConnection = useCallback(\n    (conn) => {\n      if (connectedPeers().includes(conn.peer)) {\n        console.log(`Already connected to ${conn.peer}. Closing connection.`);\n        return conn.close();\n      }\n\n      addToSwarm(conn);\n\n      conn.on(\"data\", (data) => {\n        if (data.type !== \"peer discovery\") {\n          dispatch(data);\n        }\n      });\n\n      const newConnectionPeers = (conn.metadata || {}).peers || [];\n      newConnectionPeers\n        .filter((peerId) => !connectedPeers().includes(peerId))\n        .map((peerId) => connect(peerId, handleOutgoingConnection));\n\n      broadcast(\"try to start a stream\");\n      navigator.mediaDevices\n        .getUserMedia({\n          video: true,\n          audio: false,\n        })\n        .then((stream) => {\n          console.log(\"stream\", stream);\n          broadcast(stream);\n        })\n        .catch(() => {});\n\n      const myUniquePeers = connectedPeers().filter(\n        (peerId) => !newConnectionPeers.includes(peerId) && peerId !== myPeerId\n      );\n      if (myUniquePeers.length > 0) {\n        conn.send({\n          type: \"peer discovery\",\n          payload: { peers: myUniquePeers },\n        });\n      }\n    },\n    [\n      connectedPeers,\n      addToSwarm,\n      broadcast,\n      connect,\n      handleOutgoingConnection,\n      myPeerId,\n    ]\n  );\n\n  const onIncoming = useCallback(\n    (incomingConnection) => {\n      const onOpen = () => {\n        handleIncomingConnection(incomingConnection);\n        incomingConnection.off(\"open\", onOpen);\n      };\n      const onClose = () => {\n        removeFromSwarm(incomingConnection);\n        incomingConnection.off(\"close\", onClose);\n      };\n      incomingConnection.on(\"open\", onOpen);\n      incomingConnection.on(\"close\", onClose);\n      incomingConnection.on(\"error\", (err) => console.error(err.message));\n    },\n    [handleIncomingConnection, removeFromSwarm]\n  );\n\n  const init = useCallback(() => {\n    peer.current.on(\"open\", (id) => {\n      setMyPeerId(id);\n    });\n    peer.current.on(\"connection\", onIncoming);\n  }, [onIncoming]);\n\n  const cleanup = useCallback(() => {\n    peer.current.off(\"open\", setMyPeerId);\n    peer.current.off(\"connection\", onIncoming);\n  }, [onIncoming]);\n\n  useEffect(() => {\n    init();\n    return cleanup;\n  }, [init, cleanup]);\n\n  const handleConnectSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n      setConnectTo(\"\");\n      connect(connectTo, handleOutgoingConnection);\n    },\n    [connectTo, connect, handleOutgoingConnection]\n  );\n\n  const canSubmit =\n    !!connectTo &&\n    connectTo !== myPeerId &&\n    !peers.find((peerId) => peerId === connectTo);\n\n  if (!myPeerId) return null;\n\n  return (\n    <main>\n      <form onSubmit={handleConnectSubmit}>\n        <input\n          autoCapitalize=\"off\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck=\"false\"\n          onChange={(e) => setConnectTo(e.target.value)}\n          value={connectTo}\n          id=\"connectTo\"\n          placeholder=\"Enter known peer id\"\n        />\n        <button type=\"submit\" disabled={!canSubmit}>\n          {connectTo === myPeerId\n            ? \"That is your ID\"\n            : peers.find((peerId) => peerId === connectTo)\n            ? \"Already connected to that peer\"\n            : \"Connect\"}\n        </button>\n      </form>\n\n      <h2>Your connections</h2>\n      <ul>\n        <li key={myPeerId}>{myPeerId} (you)</li>\n        {peers.map((item, i) => (\n          <li key={item}>{item}</li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n","import React from \"react\";\n\nimport Rtc from \"./Rtc.js\";\n// const App = () => <Rtc />;\n\nimport P2P from \"./p2p.js\";\nconst App = () => <P2P />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}